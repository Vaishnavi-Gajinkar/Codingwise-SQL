Joins in SQL
----------------------------------------------------------------------------------
1. Retrieve a list of booth descriptions for all booths that have been assigned to vendors. Ensure to include only those booths that have an assignment.
    SELECT b.booth_number, booth_description, vendor_id FROM booth b JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number

2. List the customer names and the quantity of products they purchased. Include only those customers who have made a purchase.
    SELECT CONCAT(customer_first_name," ",customer_last_name) AS customer_name, ROUND(SUM(quantity),1) AS quantity_purchased FROM customer c JOIN customer_purchases cp ON c.customer_id=cp.customer_id GROUP BY customer_name

3. Retrieve a list of vendor names along with their assigned booth numbers. Include only those vendors who have been assigned atleast 1 booth.
    SELECT vendor_name, booth_number FROM vendor v JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id 

4. Display the product name along with their category names. Ensure to include only those products that have a valid category assigned
    SELECT product_name, product_category_name FROM product p JOIN product_category pc ON p.product_id=pc.product_category_id

5. List all booth and their assignment to vendors, including booths that have not been assigned to any vendor
    SELECT * FROM booth b LEFT JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number WHERE vba.booth_number IS NULL

6. Retrieve the list of all purchases including the vendor names, even if the vendor didn't have any purchases on a particular market date.
    SELECT v.vendor_name, cp.product_id, cp.vendor_id, cp.market_date, cp.customer_id, SUM(cp.quantity), SUM(cp.cost_to_customer_per_qty), cp.transaction_time
    FROM vendor v LEFT JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id 
    RIGHT JOIN customer_purchases cp ON vi.market_date=cp.market_date
    GROUP BY cp.market_date

7. Display the customer names along with the booth numbers they visited, considering only those booths that have been visited
    SELECT CONCAT(customer_first_name," ",customer_last_name), booth_number 
    FROM vendor_booth_assignments vba JOIN vendor v ON vba.vendor_id=v.vendor_id 
    JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id
    JOIN customer_purchases cp ON cp.vendor_id=vi.vendor_id
    JOIN customer c ON c.customer_id=cp.customer_id

8. Retrieve a list of products that have been purchased along with the total quantity purchased for each product. Include all products, even those that have not been purchased
    SELECT p.product_id, product_name, ROUND(SUM(cp.quantity),0) AS total_quantity
    FROM product p LEFT JOIN vendor_inventory vi ON p.product_id=vi.product_id
    LEFT JOIN customer_purchases cp ON cp.product_id=vi.product_id
    GROUP BY product_name
    ORDER BY product_id






















 