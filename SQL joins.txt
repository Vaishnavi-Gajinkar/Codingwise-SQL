Joins in SQL
----------------------------------------------------------------------------------
1. Retrieve a list of booth descriptions for all booths that have been assigned to vendors. Ensure to include only those booths that have an assignment.
    SELECT b.booth_number, booth_description, vendor_id FROM booth b JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number

2. List the customer names and the quantity of products they purchased. Include only those customers who have made a purchase.
    SELECT CONCAT(customer_first_name," ",customer_last_name) AS customer_name, ROUND(SUM(quantity),1) AS quantity_purchased FROM customer c JOIN customer_purchases cp ON c.customer_id=cp.customer_id GROUP BY customer_name

3. Retrieve a list of vendor names along with their assigned booth numbers. Include only those vendors who have been assigned atleast 1 booth.
    SELECT vendor_name, booth_number FROM vendor v JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id 

4. Display the product name along with their category names. Ensure to include only those products that have a valid category assigned
    SELECT product_name, product_category_name FROM product p JOIN product_category pc ON p.product_category_id=pc.product_category_id

5. List all booth and their assignment to vendors, including booths that have not been assigned to any vendor
    SELECT * FROM booth b LEFT JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number WHERE vba.booth_number IS NULL

6. Retrieve the list of all purchases including the vendor names, even if the vendor didn't have any purchases on a particular market date.
    SELECT v.vendor_name, cp.product_id, cp.vendor_id, cp.market_date, cp.customer_id, SUM(cp.quantity), SUM(cp.cost_to_customer_per_qty), cp.transaction_time
    FROM vendor v LEFT JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id 
    RIGHT JOIN customer_purchases cp ON vi.market_date=cp.market_date
    GROUP BY cp.market_date

7. Display the customer names along with the booth numbers they visited, considering only those booths that have been visited
    SELECT CONCAT(customer_first_name," ",customer_last_name), booth_number 
    FROM vendor_booth_assignments vba JOIN vendor v ON vba.vendor_id=v.vendor_id 
    JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id
    JOIN customer_purchases cp ON cp.vendor_id=vi.vendor_id
    JOIN customer c ON c.customer_id=cp.customer_id

8. Retrieve a list of products that have been purchased along with the total quantity purchased for each product. Include all products, even those that have not been purchased
    SELECT p.product_id, product_name, ROUND(SUM(cp.quantity),0) AS total_quantity
    FROM product p LEFT JOIN vendor_inventory vi ON p.product_id=vi.product_id
    LEFT JOIN customer_purchases cp ON cp.product_id=vi.product_id
    GROUP BY product_name
    ORDER BY product_id

9. List the vendor names and number of times each vendor has been assigned a booth. Include only those vendors who have been assigned a booth atleast once 
    SELECT v.vendor_id, v.vendor_name, COUNT(booth_number) AS total_assignments
    FROM vendor v JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id
    GROUP by vendor_id
    HAVING total_assignments > 0
    ORDER BY vendor_id

10. Retrieve the total number of purchases made by each customer. Include customers who have made atleast one purchase.
    SELECT c.customer_id, CONCAT(c.customer_first_name," ", customer_last_name) AS customer_name, ROUND(SUM(c.quantity),0) AS total_purchases
    FROM customer c JOIN customer_purchases cp ON c.customer_id=cp.customer_id 
    GROUP BY c.customer_id
    HAVING total_purchases > 0

11. List all vendor names and the total revenue they generated from product sales. include only those vendors who have sold atleast 1 product
    SELECT v.vendor_name, SUM(cp.cost_to_customer_per_qty) AS total_revenue
    FROM vendor v LEFT JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id
    LEFT JOIN customer_purchases cp ON vi.product_id=cp.product_id
    GROUP BY vendor_name 
    HAVING total_revenue > 0

12. Retrieve a list of booth descriptions along with the market dates on which they were assigned to the vendors. Include only those booths that were assigned on specific market dates
    SELECT market_date, booth_description 
    FROM booth b JOIN vendor_booth_assignments vba ON vba.booth_number=b.booth_number 

13. Retrieve a list of products along with the average quantity purchased per transaction. Include only those products that have been purchased.
    SELECT p.product_id, product_name, AVG(cp.quantity) AS avg_quantity_per_trxn
    FROM product p JOIN vendor_inventory vi ON p.product_id=vi.product_id
    JOIN customer_purchases cp ON vi.product_id=cp.product_id
    GROUP BY transaction_time
    ORDER BY p.product_id, product_name

14. List all vendors and the booths they were assigned to including vendors who were not assigned any booths
    SELECT v.vendor_id, v.vendor_name, b.booth_number
    FROM vendor v LEFT JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id
    LEFT JOIN booth b ON vba.booth_number=b.booth_number
    GROUP BY v.vendor_name,booth_number
    ORDER BY v.vendor_id

15. Display the total quantity of products purchased for each product category. Include only those categories that have products associated with them.
    SELECT pc.product_category_name, SUM(cp.quantity) AS total_purchased_items_in_category
    FROM product_category pc LEFT JOIN product p ON pc.product_category_id=p.product_category_id
    LEFT JOIN vendor_inventory vi ON p.product_id=vi.product_id
    LEFT JOIN customer_purchases cp ON cp.product_id=vi.product_id
    GROUP BY pc.product_category_name

16. List vendors who have generated more than $1000 in total_sales. Include only those vendors who have achieved this sales figure
    SELECT v.vendor_id, v.vendor_name, SUM(cp.quantity*cp.cost_to_customer_per_qty) AS total_sales
    FROM vendor v JOIN vendor_inventory vi ON v.vendor_id=vi.vendor_id
    JOIN customer_purchases cp ON cp.vendor_id=vi.vendor_id 
    GROUP BY v.vendor_name
    HAVING total_sales > 1000
    ORDER BY vendor_id

17. Retrieve the list of vendor names along with booth types that they were assigned to. Include only vendors who have been assigned booths
    SELECT vendor_name, booth_type 
    FROM vendor v JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id
    JOIN booth b ON b.booth_number=vba.booth_number
    GROUP BY vendor_name, booth_type
    ORDER BY booth_type DESC

18. List all customers who purchased 'Habanero Peppers - Organic' along with the quantity they purchased. Include only those customers who have made this specific purchase.
    SELECT CONCAT(customer_first_name," ",customer_last_name) AS 'customers_who_purchased_Habanero', COUNT(cp.quantity) AS 'total_Habaneros'
    FROM customer c JOIN customer_purchases cp ON c.customer_id=cp.customer_id
    JOIN vendor_inventory vi ON vi.product_id=cp.vendor_id
    JOIN product p ON p.product_id=vi.product_id
    GROUP BY customers_who_purchased_Habanero
    HAVING p.product_id = (SELECT product_id from product where product_name LIKE 'Haba%')

19. Retrieve the booths along with booth_type along with the market_dates on which they were assigned, including only those booths that were assigned during rainy market dates
    SELECT b.booth_number, booth_type, mdi.market_date
    FROM booth b JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number
    JOIN market_date_info mdi ON mdi.market_date=vba.market_date
    WHERE market_rain_flag = 1

20. Retrieve the total sales for each vendor on market_dates when the weather was sunny. Include only those vendors who made sales on sunny days.
    SELECT cp.market_date, v.vendor_name, SUM(cp.quantity*cp.cost_to_customer_per_qty) AS total_sales
    FROM customer_purchases cp JOIN vendor_inventory vi ON cp.vendor_id=vi.vendor_id
    JOIN vendor v ON v.vendor_id=vi.vendor_id
    JOIN vendor_booth_assignments vba ON vi.vendor_id=vba.vendor_id
    JOIN market_date_info mdi ON mdi.market_date=vba.market_date
    WHERE market_season LIKE 'Summer%'











