Questions with Window Functions, Joins & Table References
---------------------------------------------------------------------------------------------------------------------------
1. Use ROW_NUMBER to assign a unique ID to each customer from the 'customer' table ordered by customer_first_name, and return only those whose name starts with 'A'
    SELECT *, ROW_NUMBER() OVER (ORDER BY customer_first_name) AS 'chust_uniq_id'
    FROM customer WHERE customer_first_name LIKE 'A%'

2. For each customer from customer_purchases and customer, find their first purchase date using ROW_NUMBER, and display the corresponding 'product_id' and 'quantity'
    SELECT * FROM (SELECT cp.*, ROW_NUMBER() OVER(PARTITION BY c.customer_id ORDER BY market_date) AS 'txn_id' 
    FROM customer c LEFT JOIN customer_purchases cp ON c.customer_id = cp.customer_id) as sub WHERE txn_id = 1

3. Use DENSE_RANK() to rank vendors from the 'vendor' and 'vendor_booth_assignments' tables by number of booth assignments 
    SELECT *, DENSE_RANK() OVER(PARTITION BY booth_number ORDER BY vendor_id ) AS 'no.OfBoothAssignments' 
    FROM vendor v LEFT JOIN vendor_booth_assignments vba ON v.vendor_id = vba.vendor_id

4. Retrieve the top 3 most frequently purchased products per customer using RANK with joins btwn 'customer_purchases','product' & 'customer'
    SELECT * FROM
(SELECT cp.customer_id, cp.product_id, cp.quantity, DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY quantity DESC) AS rnk
        FROM customer c JOIN customer_purchases cp ON c.customer_id = cp.customer_id) AS sub
WHERE rnk IN (1,2,3)

5. Use ROW_NUMBER to identify duplicate vendor names from the vendor table after applying TRIM and keep only the first occurance
    SELECT * FROM
    (SELECT vendor_name AS vendorName, ROW_NUMBER() OVER(PARTITION BY TRIM(vendor_name) ORDER BY vendor_name) AS rn FROM vendor) AS sub
    WHERE rn=1

6. Extract the first 3 letters of each customer's name from 'customer' using LEFT and assign a row number partitioned by zip code
    SELECT *, LEFT(customer_first_name, 3) AS cust_initials, ROW_NUMBER() OVER (PARTITION BY customer_zip) AS rn FROM customer

7. Rank vendors by revenue using DENSE_RANK from vendor, customer_purchases and product
    SELECT vendor_id, SUM(quantity*cost_to_customer_per_qty) AS revenue , DENSE_RANK() OVER (ORDER BY SUM(quantity*cost_to_customer_per_qty) DESC) AS rnk FROM customer_purchases GROUP BY vendor_id

8. Display each customer's first and last purchase using ROW_NUMBER on 'customer_purchases' joined with 'customer'
    SELECT * FROM (
    SELECT cp.*, CONCAT(c.customer_first_name,c.customer_last_name) AS cust_full_name, 
    ROW_NUMBER() OVER (PARTITION BY c.customer_id ORDER BY market_date ASC) AS first,
    ROW_NUMBER() OVER (PARTITION BY c.customer_id ORDER BY market_date DESC) AS last
    FROM customer c JOIN customer_purchases cp ON c.customer_id = cp.customer_id) AS sub
    WHERE first=1 OR last=1

9. Create a product short code using CONCAT and rank based on quantity_sold, using data from 'product' and 'customer_purchases'
    SELECT *, CONCAT(rnk,"_",Total_purchased) AS 'Product Code' FROM
    (SELECT *, DENSE_RANK() OVER (ORDER BY Total_purchased DESC) AS rnk FROM 
    (SELECT p.product_id, SUM(cp.quantity) AS Total_purchased 
    FROM customer_purchases cp JOIN vendor_inventory vi ON cp.product_id = vi.product_id JOIN product p ON p.product_id=vi.product_id 
    GROUP BY p.product_id) AS sub_sub) AS sub

10. Rank booths from 'booth' by number of vendor_assignments in vendor_booth_assignments
    SELECT *, DENSE_RANK() OVER (ORDER BY total_booths DESC) AS tot_boo FROM
    (SELECT b.booth_number, COUNT(b.booth_number) AS total_booths FROM booth b JOIN vendor_booth_assignments vba ON b.booth_number=vba.booth_number GROUP BY b.booth_number) AS sub
    
11. Join 'vendor' and 'vendor_booth_assignments' to find the latest booth assignment using ROW_NUMBER   
    SELECT * FROM
    (SELECT vba.*, ROW_NUMBER() OVER (PARTITION BY booth_number ORDER BY market_date DESC) AS latest_assigned 
    FROM vendor v JOIN vendor_booth_assignments vba ON v.vendor_id=vba.vendor_id) AS sub
    WHERE latest_assigned = 1

12. Use RANK to rank products within each category using 'product' and 'customer_purchases'
    SELECT p.product_category_id, p.product_id, p.product_name, cp.quantity, RANK() OVER (PARTITION BY p.product_category_id ORDER BY cp.quantity DESC) AS highest_qty_sold 
    FROM product p JOIN vendor_inventory vi ON p.product_id=vi.product_id
    JOIN customer_purchases cp ON cp.product_id=vi.product_id

13. Use CASE & RANK to label customers from 'customers' and 'customer_purchases' as 'Top', 'Average' or 'Low' buyers.                                   # verify
    SELECT *, CASE WHEN cost_to_customer_per_qty > AVG(cost_to_customer_per_qty) THEN 'Top'
                   WHEN cost_to_customer_per_qty < AVG(cost_to_customer_per_qty) THEN 'Low'
                   ELSE 'Average' END AS 'categ'
    FROM (SELECT *, DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY cost_to_customer_per_qty DESC) AS dnsRnk FROM customer_purchases) AS sub

14. For each product category, rank customers based on total quantity purchased using DENSE_RANK                                                        # verify
    SELECT pc.product_category_id, pc.product_category_name, c.customer_id, CONCAT(c.customer_first_name," ",c.customer_last_name) AS cust_full_name, DENSE_RANK() OVER (PARTITION BY product_category_id ORDER BY vi.quantity DESC) AS dnsRnk
    FROM (SELECT *
        FROM customer c JOIN customer_purchases cp ON c.customer_id=cp.customer_id
        JOIN vendor_inventory vi ON cp.product_id=vi.product_id
        JOIN product p ON vi.product_id=p.product_id
        JOIN product_category pc ON p.product_category_id=pc.product_category_id) AS sub

15. Use ROW_NUMBER to return the most recent inventory update per product for each vendor.
    SELECT * FROM
        (SELECT vendor_id, product_id, market_date, ROW_NUMBER() OVER (PARTITION BY vendor_id, product_id ORDER BY market_date DESC) as roenum FROM vendor_inventory) AS sub
    WHERE roenum = 1

16. Join vendor and booth tables, and rank vendors within each booth_type by number of booth assignments
    SELECT booth_type, vendor_id, COUNT(b.booth_number), RANK() OVER (PARTITION BY booth_type ORDER BY COUNT(b.booth_number) DESC) AS rnk
    FROM vendor_booth_assignments vba JOIN booth b ON vba.booth_number=b.booth_number GROUP BY vendor_id, booth_type

17. For each vendor, rank the original prices of their products using ROW_NUMBER and display only those with a product size ending in 'g'
    SELECT vendor_id, product_size, ROW_NUMBER() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS roenum 
    FROM vendor_inventory vi JOIN product p ON vi.product_id=p.product_id
    WHERE product_size LIKE '%g'
    
18. Create a revenue tier per vendor using CASE and rank them using RANK